Using GWMFE1DS
--------------

This file should provide just enough information to compile GWMFE1DS and run a
few canned examples.  Beyond that the going gets rough.  Unfortunately, there
is no documentation other than what can be found in the example code and in the
papers [1] and [2].

A few preliminary comments about the code:   

o GWMFE1DS evolved over a period of years ending in about 1991.  Since that
  time, I've come to regard some of the programming practices used as very
  ill-advised (but legal nonetheless): common blocks defined differently
  in different routines and array arguments treated as if they were simply
  pointers are two notable examples.
  
  I've since ceased development of this code, and have moved to a completely
  new module-oriented implementation of GWMFE in Fortran 90.  If you are
  interested, you can discuss the possibility of using this version with me
  (carlson@math.purdue.edu).
  
o Much of the data structure and organization of the computations were
  designed for the Cray/XMP which is a vector machine.  Unfortunately,
  this design is quite inappropriate for current cache-based computer
  architectures, and GWMFE1DS performs more poorly on these types of
  machines than it otherwise should.


What's Here?
------------

LICENCE   -- Copyright and right-to-use information.
Config/*  -- Platform specific configuration files
source/*  -- Canonical GWMFE1DS source files:
             source/system -- for systems of PDEs *and* scalar PDEs.
             source/common -- common to both
gtools/*  -- Graphics tools (more on this later)

Examples from [1]:

conv-diff/*     -- Convection-diffusion problem (section 6.1)
burgers/*       -- Burgers's equation.  Double-sine and nonlinear source problems
                   from sections 6.2--6.4.
drift-diff/*    -- Drift-diffusion equation for semiconductors (section 7.1).
navier-stokes/* -- Navier-Stokes shock-tube problem (section 7.2)


Getting Started
---------------

1) Select a configuration file.  In Config you'll find a collection of
   configuration files for different systems.  Find the one that matches
   yours, and copy (or link) it to config; for example,
   
      cp config-sunos-f77 config (or ln -s config-sunos-f77 config)
      
   If none of the files matches your system, you'll need to write your
   own -- start with one that is close.  If you do write a working config
   file for a new system, please send it to me so that I may include it
   with this distribution.

2) Run the examples.  Each of the example directories listed above contain
   the extra bits of code necessary to form the complete MFE code for that
   particular example, along with sample input files.  Typing "make" will
   build the executable "go", and typing "make example1" will, for example,
   run the code with the first sample input (you'll need to look at the
   Makefile to see how many examples there are).  The code reads one input
   file, mfein, and produces two output files, mfelog and mfegrf.  The
   inputs are echoed to mfelog together with periodic progress reports from
   the ODE integrator (indicating number of steps taken, number of residuals,
   number of jacobians, etc.)  You should compare the results in this file
   to those archived in the directory Data to verify that things are running
   properly.  The number of residual and jacobian evaluations (NRE and NJE)
   should match fairly closely (within 5%) at corresponding times.  It is
   unreasonable, though, to expect an exact match due to differences in
   math libraries, etc.  The actual MFE solution is written to mfegrf;
   see the next section.


Viewing the Results
-------------------

The format of the output file mfegrf is quite simple.  It consists of a
time sequence of frames.  The initial line of each frame gives the problem
time and other info, and is followed by the GWMFE solution proper, each
line giving the values of the unknowns (x, u, v, ...) at a node, in sequence.

There are a multitude of packages that could be used to visualize the
results; e.g. gnuplot, matlab, mathematica, xmgr, etc.  This may require
hand editing mfegrf to suit the requirements of the package.  Better yet
is to modify the source routine WRGRF to write the solution in the required
format.

In gtools/gp1 you'll find a simple visualization package written specifically
for 1D MFE by Lee Busby back in the mid-80s which accepts the mfegrf data file
as it is.  This C code was written for the old Sun 3/50 SunOS workstations of
that era, and it isn't very portable.  I've managed to build it under Linux in
addition to SunOS, but nothing else, though I haven't tried very hard.  An
experienced C programmer should be able to port this to other platforms without
too much effort.  (Note that the configuration file set above has no effect
here.)  If you do manage to port GP1 to another platform I'd appreciate you
sending me the patches so that I can incorporate them with this distribution.

GP1 produces output for a Tektronics display.  If you're running the X11
windowing system, don't worry, you've got a tek display emulator hidden in
each xterm window.  To reveal it, position the mouse over the xterm window
and click the middle mouse button while the control key is pressed.  A menu
should pop-up (assuming you haven't mucked about with the key/mouse bindings),
and near the bottom is the item "Switch to Tek mode".  When you select this
item, a new tek display emulator window will appear.  Run gp1 in this window.
See the man page in gtools/gp1/man for instructions on using gp1.
   

Applying GWMFE1DS to a New Problem
----------------------------------   

Here I'll only try to outline the procedure for applying GWMFE1DS to a new
problem.  In the absence of any real documentation, you'll need to use the
provided examples as your guide.  The 1D SISC paper should be useful as well.

1) Create a new directory at the same level as the other example directories,
   and copy one of the existing makefiles there.  If you have a scalar problem,
   get it from one of the scalar examples, or if you have a system, from one
   of the system examples.  This file will probably need to be modified but
   it should be close to what you need.
   
2) You need to provide one routine, PDERHS.  This evaluates the inner products
   of the PDE right hand side with the GWMFE basis functions.  The name may
   vary, but typically it is found in the file pde.f.  The routines from one
   of the provided examples should provide a good starting point.
   
3) The makefile is written so that the rest of the GWMFE1DS code is
   automatically picked up out of the source directory.  Occasionally it
   may be necessary to modify one of these routines.  Simply copy it from
   the source directory to your example directory and modify this copy.
   
4) Copy the file parameters.h from one of the examples.  This defines
   basic parameters used to dimension arrays in the code, and it is
   essential that these be set properly.
  
  
References
----------

[1] Carlson and Miller, "Design and application of a gradient-weighted moving
    finite element code I: In one dimension", SIAM J. Sci. Comput., 19 (1998).

[2] Carlson and Miller, "Design and application of a gradient-weighted moving
    finite element code II: In two dimensions", SIAM J. Sci. Comput., 19 (1998).
